name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'kubernetes/deployment.yaml'  # Ignore changes to this file to prevent loops (Without this ignore update-k8s job push will trigger the CI/CD pipeline again)
  pull_request:
    branches: [ main ] 
    # Only the first pull request will trigger ci/cd.
    # No worries because the updatek8s will ignore the file on the push next time.

jobs: # Each job in a GitHub Actions workflow runs in a fresh instance of a runner.

  test:
    name: Unit Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # For example, if your repository is named devsecops-ci-cd, it will be checked out to:
        # /home/runner/work/devsecops-ci-cd/devsecops-ci-cd
        # The repository is checked out to a directory structure under the runner's workspace. Specifically, it is checked out to:
        # /home/runner/work/<repository-name>/<repository-name>
        # It does indeed include the repository name twice.
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test || echo "No tests found, would add tests in a real project"

  lint:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm' # Cache the npm packages to speed up the build
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # GitHub Actions automatically provides a default token for workflows. 
      # This token is available in the GITHUB_TOKEN environment variable and is used by default by the actions/checkout action if no token is explicitly provided.
      # This default token has sufficient permissions to check out the repository and perform read operations.
      # In the build job, the actions/checkout action is used to check out the code for read-only operations, such as building the project. 
      # The default token provided by GitHub Actions is sufficient for this purpose.
      # UNLIKE THE update-k8s JOB, the build job does not require write access to the repository.
      # Therefore, the default token is sufficient for the build job.
      # In the update-k8s job, a custom token is provided to ensure that the workflow has the necessary permissions to perform write operations, such as committing and pushing changes to the repository. 
      # This is why you explicitly provide the token using secrets.TOKEN in the update-k8s job.
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Upload build artifacts # Upload the build artifacts to be used in the docker job
        uses: actions/upload-artifact@v4 # The actions/upload-artifact@v4 action uploads the contents of the dist/ directory and names the artifact build-artifacts.
        with:
          name: build-artifacts
          path: dist/

      # Takes contents of dist directory
      # Creates build-artifacts.zip
      # Uploads to GitHub's storage

     # build-artifacts.zip
     # └── [contents of dist/]
     #     ├── file1
     #     ├── file2
     #     └── file3

    # The download link points to the zip file
    # The directory structure is preserved inside the zip
    # When downloaded in a workflow, the action automatically handles extraction
    # You won't see dist in the URL because it's inside the zip file
    
      # Yes, you can specify different paths for the upload and download steps, but the artifact name must be the same to correctly identify the artifact. 
      # The path in the upload step specifies where the files are located on the runner, and the path in the download step specifies where to place the downloaded files on the runner.
      # Upload Path: The dist/ directory is relative to the root of the repository on the runner. 
      # This means that if your repository is checked out to /home/runner/work/repo-name/repo-name, the dist/ directory would be /home/runner/work/repo-name/repo-name/dist/.
      # Download Path: Similarly, the dist/ directory specified in the download step is relative to the root of the repository on the runner.
      # The artifacts uploaded using actions/upload-artifact@v4 are stored in GitHub's artifact storage system. Here's a detailed explanation:
      # Storage Location:
      # Artifacts are stored on GitHub's servers
      # Accessible through the GitHub Actions UI
      # Available at: https://github.com/<owner>/<repository>/actions/runs/<run-id>
      # Storage Duration:  # Optional: customize retention period 
      # By default, artifacts are stored for 90 days
      # This retention period can be configured using the retention-days parameter
      # Artifacts are accessible through: retention-days: 5 
      # GitHub Actions UI in your repository
      # GitHub's REST API
      # Subsequent jobs in the same workflow using actions/download-artifact
      # GitHub enforces storage limits based on your account type
      # Free accounts: 500MB per artifact
      # GitHub Enterprise: 2GB per artifact
      # Viewing Artifacts: To view your artifacts:
      # Go to your repository on GitHub
      # Click the "Actions" tab
      # Select the workflow run
      # Scroll down to the "Artifacts" section
      # The artifacts are stored separately from your repository and are only accessible 
      # through the GitHub Actions workflow context or the GitHub UI/API.
      # This uploads the entire dist directory and all its contents
      # The contents are compressed into a single artifact named build-artifacts
      # Stored on GitHub's servers, not in your repository

  docker:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [build]
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    outputs:
      image_tag: ${{ steps.set_output.outputs.image_tag }} # Collect the image tag output from the set_output step for the update-k8s job commit. (keep it shorter than the whole commit.)
    # The output image_tag is collected in the outputs section of the docker job. 
    # This allows the image_tag to be used by other jobs that depend on the docker job, such as the update-k8s job.
    # steps.set_output.outputs.image_tag collects the output from the $GITHUB_OUTPUT file that was set in the set_output step. 
    # This mechanism allows you to pass values between steps and jobs in your GitHub Actions workflow.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          # Download the build artifacts to the dist/ directory (relative to the root of the repository on the runner)
          # The build artifacts are downloaded into the dist/ directory within your repository's directory structure on the runner.
          # Artifact Naming: Ensure that the artifact name build-artifacts is consistent between the upload and download steps.
          # The actions/upload-artifact and actions/download-artifact actions use the name to identify the artifact and the path to specify where the files are located or should be placed.
      
      - name: Set up Docker Buildx # This allows the workflow to use advanced Docker build features provided by Buildx, such as multi-platform builds and cache management.
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} # Use the GitHub Actions bot username
          password: ${{ secrets.TOKEN }}
          # github.actor: Represents the username of the person or app that initiated the workflow.
          # Bot Username: For GitHub Actions bot, the username is github-actions[bot].
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch  
            latest
          # Dependency Between Docker Metadata and Login Steps
          # No, the Extract metadata for Docker step is not dependent on the Login to GitHub Container Registry step
          # Specifies the tags to be applied to the Docker image. Multiple tags can be specified using a multi-line string.
          # type=sha,format=long: Tags the image with the full commit SHA.
          # type=ref,event=branch: Tags the image with the branch name if the event is a branch-related event (e.g., push to a branch).
          # If the workflow is triggered by a push to the main branch, the docker/metadata-action@v5 action will generate a tag with the branch name main.
          # latest: Tags the image with latest.
          # It dynamically generates tags for the Docker image based on the commit SHA, branch name, and a static latest tag.
          # When the docker images command runs, it will output a list of Docker images, including the tags that were applied during the build process. 
          # The labels can be inspected using the docker inspect command.
          # docker inspect ghcr.io/my-repo:sha-abcdef1234567890abcdef1234567890abcdef12 
          # Example to set this up: 
          # labels: |
          #   org.opencontainers.image.source=${{ github.repository }}
          #   org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          #   org.opencontainers.image.revision=${{ github.sha }}
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Use the current directory (The build artifact of the code will be fetched by the Dockerfile - COPY --from=build /app/dist /usr/share/nginx/html) 
          # Because Copy . . Beforehand - Copies the rest of the application code to the /app directory.
          push: false # Do not push the image yet to the registry 
          tags: ${{ steps.meta.outputs.tags }} # Use the tags from the metadata action
          labels: ${{ steps.meta.outputs.labels }} # NOT USED, but can be added with metadata
          load: true # Load the image into the Docker daemon (will be seen in docker images in the ubuntu-latest runner env)
      # It will look something like this:
      # REPOSITORY                TAG                                      IMAGE ID       CREATED          SIZE
      # ghcr.io/my-repo           sha-abcdef1234567890abcdef1234567890abcdef12   abcdef123456   2 minutes ago    123MB
      # ghcr.io/my-repo           main                                     abcdef123456   2 minutes ago    123MB
      # ghcr.io/my-repo           latest                                   abcdef123456   2 minutes ago    123MB
      
      - name: Run Trivy vulnerability scanner # Scan the Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }} # Image reference
          format: 'table' # Output format
          exit-code: '1' 
          ignore-unfixed: true # Ignores vulnerabilities that do not have a fix available.
          vuln-type: 'os,library' # Scan for OS and library vulnerabilities
          severity: 'CRITICAL,HIGH' # Only show critical and high severity vulnerabilities 
          # With that we're ensuring that only secure and compliant images are deployed.
      
      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Use the current directory
          push: true 
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Set image tag output
        id: set_output
        run: echo "image_tag=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT 
        # cut -c1-7 extracts the first 7 characters of the commit SHA.
        # The output is saved to a file named GITHUB_OUTPUT, which is a built-in environment variable that contains the path to the file where the output is stored.
        # $GITHUB_OUTPUT is a special environment variable used by GitHub Actions to set output values for steps.

  update-k8s:
    name: Update Kubernetes Deployment
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' 
    # Only run this job on the main branch when a push event occurs 
    # github.ref is a built-in GitHub Actions context variable that contains the full reference of the branch or tag that triggered the workflow. 
    # For example, refs/heads/main for the main branch.
    # github.event_name is a built-in GitHub Actions context variable that contains the name of the event that triggered the workflow. 
    # For example, push for a push event.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN }} 
      # The actions/checkout action is used to check out the code with a custom token provided by the secrets.TOKEN secret.       
      # In the update-k8s job, you are making changes to the Kubernetes deployment file and pushing those changes back to the repository. 
      # To push changes, the workflow needs write access to the repository, which is granted by the token.
      
      - name: Setup Git config # Configure Git with the GitHub Actions bot user
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      # Configuring Git with a user name and email before making commits and pushing changes is mandatory to ensure that the commits have the correct author information. 
      # This configuration avoids prompts that can cause automated workflows to fail and ensures consistency in tracking changes made by CI/CD pipelines. 
      # By setting the user name and email to "GitHub Actions" and "actions@github.com", you clearly indicate that the commits were made by an automated process.
      
      - name: Update Kubernetes deployment file # Update the Kubernetes deployment file with the new image tag
        env:
          IMAGE_TAG: sha-${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          REGISTRY: ghcr.io
        run: |
          # Define the new image with tag
          NEW_IMAGE="${REGISTRY}/${GITHUB_REPOSITORY}:${IMAGE_TAG}"
          
          # Update the deployment file directly 
          sed -i "s|image: ${REGISTRY}/.*|image: ${NEW_IMAGE}|g" kubernetes/deployment.yaml
          # The sed command is used to replace the image tag in the deployment.yaml file with the new image tag.
          # Verify the change
          echo "Updated deployment to use image: ${NEW_IMAGE}"
          grep -A 1 "image:" kubernetes/deployment.yaml #
          # It searches for the pattern "image:" and displays the matching line along with the line after it. 
          # This helps ensure that the sed command has correctly replaced the old image tag with the new one.
      
      - name: Commit and push changes
        run: |
          git add kubernetes/deployment.yaml
          git commit -m "Update Kubernetes deployment with new image tag: ${{ needs.docker.outputs.image_tag }} [skip ci]" || echo "No changes to commit"
          git push
